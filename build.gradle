plugins {
    id "com.enonic.defaults" version "2.0.1"
    id "com.enonic.xp.app" version "2.0.0"
    id "com.moowork.node" version "1.3.1"
    id "maven-publish"
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"
}

// This variable is used in the include lib-react4xp below, and also used in the optional tasks in readme.gradle
rootProject.ext.LIB_REACT4XP_VERSION = "1.1.1"

dependencies {
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    //include "com.enonic.xp:lib-auth:${xpVersion}"
    //include "com.enonic.xp:lib-context:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    //include "com.enonic.xp:lib-io:${xpVersion}"
    //include "com.enonic.xp:lib-mail:${xpVersion}"
    //include "com.enonic.xp:lib-repo:${xpVersion}"
    //include "com.enonic.xp:lib-websocket:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.0"
    include "com.enonic.lib:lib-mustache:2.0.0"
    include "com.enonic.lib:lib-util:2.3.0"
    include "com.enonic.lib:lib-guillotine:4.2.0"
    include "com.enonic.lib:lib-menu:3.1.0"
    include "com.enonic.lib:lib-urlredirect:3.0.0"
    
    include "com.enonic.lib:lib-react4xp:${rootProject.ext.LIB_REACT4XP_VERSION}"
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}


node {
    download = true
    version = '12.13.1'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task clientWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.client.config.js', '--color', '--hide-modules' ]
    description = 'Build UI resources (js, css, etc).'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

///////////////////////////////////////////////////////////////////////////////////////////////////

// Necessary react4xp build setup.
// Used by the mandatory 'jar' task, so 'npm i' or 'gradlew npmInstall' must be run separately before e.g. 'gradlew build' or 'enonic project deploy'.
apply from: 'node_modules/react4xp/react4xp.gradle'

// Optional dev convenience:
// Adjusts the regular 'npmInstall' gradle task with two improvements:
//      - NSI allows npm-linked local development (https://www.npmjs.com/package/npm-safe-install)
//      - faster gradle up-to-date check during build (only checks content of package.json and package-lock.json,
//          and a marker file for whether node_module exists as a regular or NSI-linked version. Runs NSI if it's linked.
//          Does not check the entire node_modules subtree).
apply from: 'node_modules/react4xp/npmInstall.gradle'

// Optional dev convenience:
// Adds the 'updateReadme' gradle task which generates readme files at root from docs/README.src.md
apply from: 'node_modules/react4xp/updaters.gradle'






////////////////////////////////////////////////////////////////////////////////////////////////////

// This task takes care of es6 under src/main/resources/site. You can replace it with build steps of your own if you want.
// IMPORTANT: IF YOU DON'T USE THIS TASK TO COMPILE THE REGULAR XP JS (/ES6/TS etc),
// MAKE SURE THAT YOUR OWN TASK/SCRIPT/LOGIC IGNORES .JSX FILES THAT ARE LOCATED UNDER src/main/resources/site !
// It's safer to let React4xp's tasks (in react4xp.gradle) handle those.
task compileXP(type: NodeTask) {
    group 'enonic xp'
    description 'Babel-compile Enonic XP ES6 source files (important: ignoring JSX components since they are left to react4xp)'

    script = file('node_modules/@babel/cli/bin/babel.js')
    args = ["src/main/resources", "--out-dir", "build/resources/main", "--ignore", "**/*.jsx"]      // <-- Ignoring JSX in the XP structure is important!

    inputs.dir 'src/main/resources'
    outputs.dir("build/resources/main")
}
compileXP.dependsOn += npmInstall

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    exclude 'assets/styles/**/*.js'
    exclude 'assets/js/**/*.es6'

    dependsOn += 'clientWebpack'
    dependsOn += 'compileXP'
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}
